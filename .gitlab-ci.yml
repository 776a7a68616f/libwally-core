variables:
  GIT_SUBMODULE_STRATEGY: recursive

build_wally_release_files:
  image: greenaddress/wallycore@sha256:21112c3d05f0f541a43636bb5c7e1826292f9c66fca0b68546b963adac4fc4c3
  artifacts:
    expire_in: 7 days
    name: wallycore-bindings
    when: on_success
    paths:
    - dist/*
  tags:
    - ga
  script:
    - python3 -m build
    - virtualenv -p python3 .smoketest
    - source .smoketest/bin/activate
    - pip install --find-links=./dist wallycore
    - python -c "import wallycore as w; assert w.hex_from_bytes(w.hex_to_bytes('ff')) == 'ff'"
    - deactivate
    - rm -rf .smoketest dist/*.whl
    - mv dist wally_dist
    - ./tools/build_android_libraries.sh
    - mv release wallycore-android-jni
    - tar czf wally_dist/wallycore-android-jni.tar.gz --remove-files wallycore-android-jni
    - source /opt/emsdk/emsdk_env.sh
    - tools/build_wasm.sh
    - cd dist
    - tar czf wallycore-wasm.tar.gz --remove-files wallycore.html wallycore.js wallycore.wasm
    - cd ..
    - sphinx-build -b html -a -c docs/source docs/source docs/build/html
    - cd docs/build
    - tar czf ../../wally_dist/apidocs.tar.gz html/
    - cd ../..
    - mv wally_dist/* dist/
    - rmdir wally_dist

build_mingw_static:
  image: greenaddress/wallycore@sha256:21112c3d05f0f541a43636bb5c7e1826292f9c66fca0b68546b963adac4fc4c3
  tags:
    - ga
  script:
    - ./tools/cleanup.sh && ./tools/autogen.sh
    - CC=x86_64-w64-mingw32-gcc ./configure --host=x86_64-w64-mingw32 --disable-swig-python --disable-swig-java --disable-shared --enable-static
    - make -j $(($(grep ^processor /proc/cpuinfo | wc -l) / 2))

run_tests:
  image: greenaddress/wallycore@sha256:21112c3d05f0f541a43636bb5c7e1826292f9c66fca0b68546b963adac4fc4c3
  tags:
    - ga
  artifacts:
    reports:
      codequality: valgrind.json
  script:
    - ./tools/cleanup.sh && ./tools/autogen.sh
    - ./configure --enable-export-all --enable-swig-python --enable-swig-java --enable-shared --disable-static
    - make -j $(($(grep ^processor /proc/cpuinfo | wc -l) / 2))
    - make check -j $(($(grep ^processor /proc/cpuinfo | wc -l) / 2))
    - for t in $(ls src/.libs/test_* | egrep -v '_clear|xml|json' | tr '\n' ' '); do LD_LIBRARY_PATH=./src/.libs/ valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose --xml=yes --xml-file=$t.xml $t; done
    - for t in $(ls src/.libs/test_* | egrep -v '_clear|xml|json' | tr '\n' ' '); do valgrind-codequality --input-file $t.xml --output-file $t.json; done
    - jq '[.[]|.[]]' -s ./src/.libs/test_*.json > valgrind.json
